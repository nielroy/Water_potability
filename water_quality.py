# -*- coding: utf-8 -*-
"""Updated of Water_Quality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SIJ5unTZa_DA3k_kKWfViC3C1ANFwD4P
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

import io
Water = pd.read_csv(io.BytesIO(uploaded['water_potability.csv']))

Water

# Water.isnull()
Water.isnull().sum()

X = Water[['Hardness','Solids','Chloramines','Conductivity','Organic_carbon','Turbidity']]

X

X.isnull().sum()

Y = Water['Potability']

Y

from sklearn.preprocessing import StandardScaler
Scaler = StandardScaler()
X = Scaler.fit_transform(X)

X

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2,random_state=42)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train,y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)
# print(pred)

from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import plot_tree

# model = DecisionTreeClassifier()
model = DecisionTreeClassifier(criterion = 'entropy', max_leaf_nodes=10)
model.fit(X_train,y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)
# plot_tree(model)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators = 10, criterion = 'entropy')
model.fit(X_train,y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)

X = Water[['ph','Hardness','Solids','Chloramines','Sulfate','Conductivity','Organic_carbon','Trihalomethanes','Turbidity']]
X

X.isnull().sum()

from sklearn.impute import SimpleImputer
imp = SimpleImputer(missing_values=np.nan, strategy="mean")
X = imp.fit_transform(X)
X

X = pd.DataFrame(X)
X

from sklearn.preprocessing import StandardScaler
Scaler = StandardScaler()
X = Scaler.fit_transform(X)

X

"""Best Result of Logistic Regrssion"""

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2,random_state=42)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train,y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)

"""Best result of Decision Tree Classifier

"""

# model = DecisionTreeClassifier()
model = DecisionTreeClassifier(max_depth=25, max_leaf_nodes=10, criterion = 'entropy', splitter='random', random_state=0)
model.fit(X_train,y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)
# plot_tree(model)

"""Best result of Random Forest Classifier"""

model = RandomForestClassifier(n_estimators = 500, criterion = 'entropy', max_depth=20)
model.fit(X_train,y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)

"""Best result of Kernel SVM"""

from sklearn.svm import SVC
model = SVC(kernel = 'rbf', random_state = 0)
model.fit(X_train, y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)

"""Best result of Naive Bayes

"""

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)
pred = model.predict(X_test)
print(model.score(X_test,y_test))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, pred)